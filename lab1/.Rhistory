comparison.cloud(colors = c("red", "darkgreen"),
max.words = 100)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad5/zad5.R", echo=TRUE)
View(bigrams_nouns)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad5/zad5.R", echo=TRUE)
View(bigrams)
View(top_nouns)
top_bigrams <- bigrams %>% left_join(top_nouns, by = c("word2" = "word2"))
View(top_bigrams)
top_bigrams <- bigrams %>% right_join(top_nouns, by = c("word2" = "word2"))
bigrams2 <- bigrams %>%
left_join(parts_of_speech, by = c("word1" = "word"))
View(bigrams2)
?left_join
bigrams2 <- bigrams %>%
left_join(parts_of_speech, by = c("word1" = "word"), suffix = c("1", "2"))
View(bigrams2)
bigrams2 <- bigrams %>%
left_join(parts_of_speech, by = c("word1" = "word"), suffix = c("2", "1"))
bigrams <- verne %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigrams <- bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ")
bigrams <- bigrams %>%
filter(!word1 %in% stop_words$word) %>%
filter(!word2 %in% stop_words$word)
nrc <- get_sentiments("nrc")
bigrams <- bigrams %>%
left_join(parts_of_speech, by = c("word2" = "word")) %>%
filter(pos == "Noun") %>%
left_join(parts_of_speech, by = c("word1" = "word"), suffix = c("2", "1"))
View(bigrams)
top_nouns <- bigrams %>% count(word2) %>% top_n(3)
print(paste("Most used nouns: ", top_nouns$word2[1],", ", top_nouns$word2[2],", ", top_nouns$word2[3]))
top_bigrams <- bigrams %>% right_join(top_nouns, by = c("word2" = "word2"))
top_bigrams %>%
count(pos1, sort = T)
pos <- top_bigrams %>%
count(pos1, sort = T) %>%
mutate(nn = n / sum(n))
pos
ggplot(pos) +
geom_bar(aes(x = reorder(pos, -nn), nn, fill = reorder(pos, nn)), stat="identity") +
coord_flip() + theme(legend.position = "none") +
labs(y = "fraction", x = "POS")
ggplot(pos) +
geom_bar(aes(x = reorder(pos, -nn), nn, fill = reorder(pos, nn)), stat="identity") +
coord_flip() + theme(legend.position = "none") +
labs(y = "fraction", x = "POS")
ggplot(pos) +
geom_bar(aes(x = reorder(pos1, -nn), nn, fill = reorder(pos1, nn)), stat="identity") +
coord_flip() + theme(legend.position = "none") +
labs(y = "fraction", x = "POS")
View(bigrams2)
pos <- top_bigrams[top_bigrams$word1 == top_nouns$word2[1]] %>%
count(pos1, sort = T) %>%
mutate(nn = n / sum(n))
df2 <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(total_count=n(),.groups = 'drop')
View(df2)
View(top_nouns)
top_nouns <- bigrams %>% count(word2) %>% top_n(3) %>% sort()
top_nouns <- bigrams %>% count(word2) %>% top_n(3) %>% sort()
View(top_nouns)
top_nouns <- top_nouns[order(top_nouns$n),]
View(top_nouns)
top_nouns <- top_nouns[order(-top_nouns$n),]
View(top_nouns)
print(paste("Most used nouns: ", top_nouns$word2[1],", ", top_nouns$word2[2],", ", top_nouns$word2[3]))
View(df2)
print(paste("Most used nouns:", top_nouns$word2[1],",", top_nouns$word2[2],",", top_nouns$word2[3]))
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(total_count=n()) %>%
mutate(nn = n / sum(n))
View(pos)
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(total_count=n())
View(pos)
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(n=n())
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(n=n())
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(total_count=n())
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(total_count=n(),.groups = 'drop')
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(total_count=n(),.groups = 'drop')
View(top_bigrams)
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(),.groups = 'drop')
pos <- pos %>% group_by(word2) %>%
summarise(pos_total=n(),.groups = 'drop')
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(),.groups = 'drop')
pos %>% group_by(word2) %>%
count(pos_count, sort = T)
pos %>% group_by(word2)
pos %>% group_by(word2) %>%
count(pos_count, sort = T)
?summarise
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(), total_count= sum(pos1),.groups = 'drop')
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(), total_count= sum(pos_count),.groups = 'drop')
View(pos)
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(), total_count= sum(n()),.groups = 'drop')
View(pos)
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(),.groups = 'drop')
pos2 <- pos %>% group_by(word2) %>%
count(pos1, sort = T)
View(pos2)
pos2 <- pos %>% group_by(word2) %>%
summarise(total_count=n(),.groups = 'drop')
pos2 <- pos %>% group_by(word2) %>%
summarise(total_count=sum(),.groups = 'drop')
pos2 <- pos %>% group_by(word2) %>%
summarise(total_count=sum(pos1),.groups = 'drop')
pos2 <- pos %>% group_by(word2) %>%
summarise(total_count=sum(pos1),.groups = 'drop')
View(pos)
pos2 <- pos %>% group_by(word2, pos1) %>%
summarise(total_count=sum(),.groups = 'drop')
View(pos2)
pos2 <- pos %>% group_by(word2) %>%
summarise(total_count=sum(),.groups = 'drop')
pos2 <- pos %>% group_by(word2) %>%
summarise(total_count=sum(pos_count),.groups = 'drop')
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(),.groups = 'drop') %>% left_join(top_bigrams, by = c("word2" = "word2"))
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(),.groups = 'drop') %>% left_join(top_bigrams[["word2", "n"]], by = c("word2" = "word2"))
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(),.groups = 'drop') %>% left_join(top_bigrams[["word2", "n"],], by = c("word2" = "word2"))
top_bigrams[["word2", "n"],:]
top_bigrams[["word2", "n"],]
top_bigrams[c("word2", "n"),]
select(top_bigrams, c("word2", "n"))
select(top_bigrams, c("word2", "n")) %>% group_by(word2)
pos <- top_bigrams %>% group_by(word2,pos1) %>%
summarise(pos_count=n(),.groups = 'drop')
pos2 <- pos %>% group_by(word2) %>%
summarise(total_count=sum(pos_count),.groups = 'drop')
pos3 <- pos %>% left_join(pos2, by = c("word2" = "word2"))
View(pos3)
pos3 <- pos %>% left_join(pos2, by = c("word2" = "word2")) %>%
mutate(nn = pos_count / total_count)
pos3 <- pos3[order(-n, nn),]
pos3 <- pos3[order(-total_count, nn),]
pos3 <- pos3[order(-total_count, nn),]
pos3 <- pos3[order(-total_count, -nn),]
pos3 <- pos3[order(total_count, -nn),]
pos3 <- pos3[order(-pos3$total_count, -pos3$nn),]
pos <- pos %>% left_join(pos2, by = c("word2" = "word2")) %>%
mutate(nn = pos_count / total_count)
pos <- pos3[order(-pos3$total_count, -pos3$nn),]
ggplot(pos) +
geom_bar(aes(x = reorder(pos1, -nn), nn, fill = reorder(pos1, nn)), stat="identity") +
coord_flip() + theme(legend.position = "none") +
labs(y = "fraction", x = "POS")
ggplot(pos) +
geom_bar(aes(x = reorder(pos1, -nn), nn, fill = reorder(pos1, nn)), stat="identity") +
coord_flip() + theme(legend.position = "none") +
labs(y = "fraction", x = "POS") + facet_wrap(~word2)
ggplot(pos) +
geom_bar(aes(x = reorder(pos1, -nn), nn, fill = reorder(pos1, nn)), stat="identity") +
coord_flip() + theme(legend.position = "none") +
labs(y = "fraction", x = "POS") + facet_wrap(~word2) + coord_flip()
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad5/zad5.R", echo=TRUE)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad5/zad5.R", echo=TRUE)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad5/zad5.R", echo=TRUE)
top_bigrams %>%
inner_join(get_sentiments("bing"), by = c("word1" = "word")) %>%
count(word1, sentiment, sort = TRUE) %>%
acast(word1 ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "darkgreen"), max.words = 100)
top_bigrams %>%
inner_join(get_sentiments("bing"), by = c("word1" = "word")) %>%
count(word1, sentiment, sort = TRUE) %>%
acast(word1 ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("red", "darkgreen"), max.words = 100)
text(x=0, y=0, paste(top_nouns$word2[1],",", top_nouns$word2[2],",", top_nouns$word2[3]), cex = 0.5)
text(x=-1, y=0, paste(top_nouns$word2[1],",", top_nouns$word2[2],",", top_nouns$word2[3]), cex = 0.5)
text(x=-1, y=0, paste(top_nouns$word2[1],",", top_nouns$word2[2],",", top_nouns$word2[3]), cex = 0.5)
text(x=0, y=-0.5, paste(top_nouns$word2[1],",", top_nouns$word2[2],",", top_nouns$word2[3]), cex = 0.5)
top_bigrams_sentiments <- top_bigrams %>%
inner_join(get_sentiments("bing"), by = c("word1" = "word")) %>%
count(word1, sentiment, sort = TRUE) %>%
top_bigrams_sentiments <- top_bigrams %>%
inner_join(get_sentiments("bing"), by = c("word1" = "word")) %>%
count(word1, sentiment, sort = TRUE)
top_bigrams_sentiments <- top_bigrams %>%
inner_join(get_sentiments("bing"), by = c("word1" = "word")) %>%
count(word1, sentiment, sort = TRUE)
View(top_bigrams_sentiments)
top_bigrams_sentiments <- top_bigrams %>%
left_join(get_sentiments("bing"), by = c("word1" = "word")) %>%
count(word1, sentiment, sort = TRUE)
View(top_bigrams_sentiments)
top_bigrams_sentiments <- top_bigrams %>%
left_join(get_sentiments("bing"), by = c("word1" = "word"))
View(top_bigrams_sentiments)
View(top_bigrams_sentiments)
source("C:/Users/bogum/Desktop/mgr_studia/semestr3/Text/zad6/zad6.R", echo=TRUE)
data.bbc.equal %>%
group_by(emo) %>%
summarise(n = n())
dim(tdm); length(class)
tmp <- slim.tdm.matrix(tdm,data.bbc.equal, 5, 1)
tdm <- tmp[[1]]
class <- tmp[[2]]
dim(tdm); length(class)
model.equal <- make.svm.model(tdm, class)
tdm <- make.tdm.matrix(data.bbc.equal)
tmp <- slim.tdm.matrix(tdm,data.bbc.equal, 5, 1)
tdm <- tmp[[1]]
class <- tmp[[2]]
dim(tdm); length(class)
model.equal <- make.svm.model(tdm, class)
confusionMatrix(model.random)
confusionMatrix(model.equal)
res <- resamples(list(Random = model.random, Equal = model.equal))
bwplot(res)
tdm <- make.tdm.matrix(data.bbc.equal)
tmp <- slim.tdm.matrix(tdm,data.bbc.equal, 6, 1)
tdm <- tmp[[1]]
class <- tmp[[2]]
dim(tdm); length(class)
model.equal <- make.svm.model(tdm, class)
confusionMatrix(model.equal)
res <- resamples(list(Random = model.random, Equal = model.equal))
bwplot(res)
tdm <- make.tdm.matrix(data.bbc.equal)
tmp <- slim.tdm.matrix(tdm,data.bbc.equal, 4, 1)
tdm <- tmp[[1]]
class <- tmp[[2]]
dim(tdm); length(class)
model.equal <- make.svm.model(tdm, class)
res <- resamples(list(Random = model.random, Equal = model.equal))
bwplot(res)
library(dplyr)
library(tidytext)
library(tm)
library(lsa)
library(gutenbergr)
library(topicmodels)
library(ggplot2)
rm(list = ls())
g <- gutenberg_works()
verne_en <- gutenberg_works(languages = "en") %>%
filter(author == "Verne, Jules")
austen_en <- gutenberg_works(languages = "en") %>%
filter(author == "Austen, Jane")
verne_en_ids <- c(83, 103, 3526)
verne_en_books <- verne_en[verne_en$gutenberg_id %in% verne_en_ids,c("gutenberg_id","title", "author")]
austen_en_ids <- c(105, 121, 141)
austen_en_books <- austen_en[austen_en$gutenberg_id %in% austen_en_ids,c("gutenberg_id","title", "author")]
v <- gutenberg_download(c(verne_en_ids,austen_en_ids))
v <- left_join(v, rbind(verne_en_books, austen_en_books))
df <- v %>%
group_by(title, author) %>%
summarise(text = paste(text, collapse = " "))
removeSpecialChars <- function(x) gsub("[^0-9A-Za-z///' ]"," ",x)
docs_ids <- seq(1:6)
df$doc_id <- docs_ids
titles <- df$title
corpus_verne <- VCorpus(DataframeSource(as.data.frame(df[df$author == "Verne, Jules",])))
corpus_verne <- corpus_verne %>% tm_map(removeWords, stopwords("english")) %>%
tm_map(content_transformer(removeSpecialChars)) %>%
tm_map(removePunctuation) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(stripWhitespace) %>%
tm_map(stemDocument)
View(corpus_verne)
doc_verne <- TermDocumentMatrix(corpus_verne)
View(doc_verne)
txt <- c("asda224", "24asaf")
removeSpecialChars(txt)
removeSpecialChars <- function(x) gsub("[0-9A-Za-z///' ]"," ",x)
removeSpecialChars <- function(x) gsub("[0-9A-Za-z///' ]"," ",x)
removeSpecialChars(txt)
removeNumbers(txt)
removeNumbers(df$text)
View(df)
df$text<- removeNumbers(df$text)
titles <- df$title
View(df)
corpus_verne <- VCorpus(DataframeSource(as.data.frame(df[df$author == "Verne, Jules",])))
corpus_verne <- corpus_verne %>% tm_map(removeWords, stopwords("english")) %>%
tm_map(removePunctuation) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(content_transformer(removeSpecialChars)) %>%
tm_map(stripWhitespace) %>%
tm_map(stemDocument)
doc_verne <- TermDocumentMatrix(corpus_verne)
ap_lda <- LDA(doc_verne, k = 2, control = list(seed = 1234))
ap_topics <- tidy(ap_lda, matrix = "beta")
ap_top_terms <- ap_topics %>%
group_by(topic) %>%
top_n(10, beta) %>%
ungroup() %>%
arrange(topic, -beta)
ap_top_terms %>%
mutate(term = reorder_within(term, beta, topic)) %>%
ggplot(aes(term, beta, fill = factor(topic))) +
geom_col(show.legend = FALSE) +
facet_wrap(~ topic, scales = "free") + scale_x_reordered() + coord_flip()
View(doc_verne)
doc_verne[["dimnames"]][["Terms"]]
df$text
corpus_verne <- VCorpus(DataframeSource(as.data.frame(df[df$author == "Verne, Jules",])))
corpus_verne <- corpus_verne %>% tm_map(removeWords, stopwords("english")) %>%
tm_map(removePunctuation) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(content_transformer(removeSpecialChars)) %>%
tm_map(stripWhitespace) %>%
tm_map(stemDocument)
doc_verne <- TermDocumentMatrix(corpus_verne)
View(doc_verne)
doc_verne[["dimnames"]][["Terms"]]
View(df)
doc_verne
df <- v %>%
group_by(title, author) %>%
summarise(text = paste(text, collapse = " "))
df$doc_id <- docs_ids
corpus_verne <- VCorpus(DataframeSource(as.data.frame(df[df$author == "Verne, Jules",])))
corpus_verne <- corpus_verne %>% tm_map(removeWords, stopwords("english")) %>%
tm_map(removePunctuation) %>%
tm_map(content_transformer(tolower)) %>%
tm_map(content_transformer(removeSpecialChars)) %>%
tm_map(stripWhitespace) %>%
tm_map(stemDocument)
doc_verne <- TermDocumentMatrix(corpus_verne)
doc_verne
View(doc_verne)
setwd("C:/Users/bogum/Desktop/mgr_studia/semestr4/Sieci_decyzyjne/lab1")
library(bnlearn)
azja <- data(asia)
?asia
?table
library(Rgraphviz)
force(asia)
View(asia)
counts <- table(azja)
counts <- table(azja$D)
View(asia)
counts <- table(azja[1:3])
counts <- table(azja[1, 1:3])
azja[1, 1:3]
azja[1]
data(asia)
asia[1]
asia[1, 1:3]
counts <- table(asia[1, 1:3])
counts
counts <- table(asia[, 1:3])
counts
counts <- table(asia[, 1])
counts
?sapply
counts <- sapply(table(asia))
?sapply
counts <- sapply(asia, table)
View(counts)
View(asia)
?barplot
barplot(counts)
barplot(counts, ylab = "counts", legend = TRUE)
labels <- c ("Burglar", "Alarm", "Watson", "Earthquake", "News")
M <- matrix (c("Burglar","Alarm",
"Alarm","Watson",
"Earthquake","Alarm",
"Earthquake","News"),
ncol = 2,
byrow = TRUE)
g <- empty.graph (labels)
arcs (g) <- M
typeof(g)
class(g)
labels <- c ("D", "T", "L", "B",
"A", "S", "X", "E")
M <- matrix (c("A","T",
"T","E",
"L","E",
"E","D",
"S","L",
"S","B",
"E","X",
"L","E",
"B","D"),
ncol = 2,
byrow = TRUE)
g <- empty.graph (labels)
M
arcs (g) <- M
M <- matrix (c("A","T",
"T","E",
"L","E",
"E","D",
"S","L",
"S","B",
"E","X",
"B","D"),
ncol = 2,
byrow = TRUE)
M
g <- empty.graph (labels)
arcs (g) <- M
print("Rodziece:")
parents(g, "E")
sapply(g,parents)
g$nodes
g$nodes$D$parents
sapply(g$nodes,parents)
g$nodes
sapply(g$nodes,parents)
fit(g$nodes,parents)
parents(g)
parents(g, "A")
g$nodes
g$learning
g$nodes
?ly
?sapply
sapply(labels,parents(g))
g.plot <- graphviz.plot(g, render = FALSE)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
E="lightsalmon"))
renderGraph(g.plot)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
E="lightsalmon"), fontsize=20))
renderGraph(g.plot)
g.plot <- graphviz.plot(g, render = FALSE, fontsize=20))
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
E="lightsalmon"))
g.plot <- graphviz.plot(g, render = FALSE, fontsize=20)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
E="lightsalmon"))
renderGraph(g.plot)
g.plot <- graphviz.plot(g, render = FALSE, fontsize=10)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
E="lightsalmon"))
renderGraph(g.plot)
g.plot <- graphviz.plot(g, fontsize=10, render = FALSE)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
E="lightsalmon"))
g.plot <- graphviz.plot(g, render = FALSE)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
E="lightsalmon"))
renderGraph(g.plot)
g.plot <- graphviz.plot(g, render = FALSE)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
S="lightblue",
L="lightgreen",
B="lightgreen",
D="lightsalmon"))
renderGraph(g.plot)
g.plot <- graphviz.plot(g, render = FALSE)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
S="lightblue",
L="lightgreen",
B="lightgreen",
D="lightsalmon",
E="lightsalmon",
X="lightsalmon"))
renderGraph(g.plot)
?vstructs
vstructs(g)
vstructs(g, arcs = TRUE)
g.plot <- graphviz.plot(g, highlight=list(arcs=vstructs(g, arcs = TRUE), col="red"), render = FALSE)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
S="lightblue",
L="lightgreen",
B="lightgreen",
D="lightsalmon",
E="lightsalmon",
X="lightsalmon"))
renderGraph(g.plot)
?graphviz.plot
sapply(labels,parents(), x=g)
sapply(labels,parents, x=g)
print("Rodzice:")
sapply(labels,parents, x=g)
sapply(labels,parents, x=g)
sapply(labels,children, x=g)
sapply(labels,nbr, x=g)
print("Sąsiedzi:")
sapply(labels,nbr, x=g)
g.plot <- graphviz.plot(g, highlight=list(arcs=vstructs(g, arcs = TRUE), col="red", lwd = 2), render = FALSE)
nodeRenderInfo(g.plot) <- list(fill=c(A="lightblue",
T="lightgreen",
S="lightblue",
L="lightgreen",
B="lightgreen",
D="lightsalmon",
E="lightsalmon",
X="lightsalmon"))
renderGraph(g.plot)
source("C:/Users/bogum/Desktop/mgr_studia/semestr4/Sieci_decyzyjne/zad2/zad2.R", echo=TRUE)
